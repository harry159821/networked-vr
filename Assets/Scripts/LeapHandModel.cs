using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class LeapHandModel
{
    [RealtimeProperty(1, false, true)]
    private byte[] _fingerPoses = new byte[0];
    [RealtimeProperty(2, false, true)]
    private byte[] _headTarget = new byte[0];
    [RealtimeProperty(3, false, true)]
    private byte[] _rightHeadTarget = new byte[0];
    [RealtimeProperty(4, false, true)]
    private byte[] _leftHandTarget = new byte[0];
    [RealtimeProperty(5, false, true)]
    private byte[] _visemes = new byte[0];
    [RealtimeProperty(6, false, true)]
    private byte[] _oculusBlendshapes = new byte[0];
    [RealtimeProperty(7, false, true)]
    private byte[] _eyeData = new byte[0];
    [RealtimeProperty(8, false, true)]
    private byte[] _lipData = new byte[0];
}
/* ----- Begin Normal Autogenerated Code ----- */
public partial class LeapHandModel : IModel {
    // Properties
    public System.Byte[] fingerPoses {
        get { return _fingerPoses; }
        set { if (value == _fingerPoses) return; _fingerPosesShouldWrite = true; _fingerPoses = value; FireFingerPosesDidChange(value); }
    }
    public System.Byte[] headTarget {
        get { return _headTarget; }
        set { if (value == _headTarget) return; _headTargetShouldWrite = true; _headTarget = value; FireHeadTargetDidChange(value); }
    }
    public System.Byte[] rightHeadTarget {
        get { return _rightHeadTarget; }
        set { if (value == _rightHeadTarget) return; _rightHeadTargetShouldWrite = true; _rightHeadTarget = value; FireRightHeadTargetDidChange(value); }
    }
    public System.Byte[] leftHandTarget {
        get { return _leftHandTarget; }
        set { if (value == _leftHandTarget) return; _leftHandTargetShouldWrite = true; _leftHandTarget = value; FireLeftHandTargetDidChange(value); }
    }
    public System.Byte[] visemes {
        get { return _visemes; }
        set { if (value == _visemes) return; _visemesShouldWrite = true; _visemes = value; FireVisemesDidChange(value); }
    }
    public System.Byte[] oculusBlendshapes {
        get { return _oculusBlendshapes; }
        set { if (value == _oculusBlendshapes) return; _oculusBlendshapesShouldWrite = true; _oculusBlendshapes = value; FireOculusBlendshapesDidChange(value); }
    }
    public System.Byte[] eyeData {
        get { return _eyeData; }
        set { if (value == _eyeData) return; _eyeDataShouldWrite = true; _eyeData = value; FireEyeDataDidChange(value); }
    }
    public System.Byte[] lipData {
        get { return _lipData; }
        set { if (value == _lipData) return; _lipDataShouldWrite = true; _lipData = value; FireLipDataDidChange(value); }
    }
    
    // Events
    public delegate void FingerPosesDidChange(LeapHandModel model, System.Byte[] value);
    public event         FingerPosesDidChange fingerPosesDidChange;
    public delegate void HeadTargetDidChange(LeapHandModel model, System.Byte[] value);
    public event         HeadTargetDidChange headTargetDidChange;
    public delegate void RightHeadTargetDidChange(LeapHandModel model, System.Byte[] value);
    public event         RightHeadTargetDidChange rightHeadTargetDidChange;
    public delegate void LeftHandTargetDidChange(LeapHandModel model, System.Byte[] value);
    public event         LeftHandTargetDidChange leftHandTargetDidChange;
    public delegate void VisemesDidChange(LeapHandModel model, System.Byte[] value);
    public event         VisemesDidChange visemesDidChange;
    public delegate void OculusBlendshapesDidChange(LeapHandModel model, System.Byte[] value);
    public event         OculusBlendshapesDidChange oculusBlendshapesDidChange;
    public delegate void EyeDataDidChange(LeapHandModel model, System.Byte[] value);
    public event         EyeDataDidChange eyeDataDidChange;
    public delegate void LipDataDidChange(LeapHandModel model, System.Byte[] value);
    public event         LipDataDidChange lipDataDidChange;
    
    private bool _fingerPosesShouldWrite;
    private bool _headTargetShouldWrite;
    private bool _rightHeadTargetShouldWrite;
    private bool _leftHandTargetShouldWrite;
    private bool _visemesShouldWrite;
    private bool _oculusBlendshapesShouldWrite;
    private bool _eyeDataShouldWrite;
    private bool _lipDataShouldWrite;
    
    public LeapHandModel() {
    }
    
    // Events
    public void FireFingerPosesDidChange(System.Byte[] value) {
        try {
            if (fingerPosesDidChange != null)
                fingerPosesDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireHeadTargetDidChange(System.Byte[] value) {
        try {
            if (headTargetDidChange != null)
                headTargetDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireRightHeadTargetDidChange(System.Byte[] value) {
        try {
            if (rightHeadTargetDidChange != null)
                rightHeadTargetDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireLeftHandTargetDidChange(System.Byte[] value) {
        try {
            if (leftHandTargetDidChange != null)
                leftHandTargetDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireVisemesDidChange(System.Byte[] value) {
        try {
            if (visemesDidChange != null)
                visemesDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireOculusBlendshapesDidChange(System.Byte[] value) {
        try {
            if (oculusBlendshapesDidChange != null)
                oculusBlendshapesDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireEyeDataDidChange(System.Byte[] value) {
        try {
            if (eyeDataDidChange != null)
                eyeDataDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FireLipDataDidChange(System.Byte[] value) {
        try {
            if (lipDataDidChange != null)
                lipDataDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        FingerPoses = 1,
        HeadTarget = 2,
        RightHeadTarget = 3,
        LeftHandTarget = 4,
        Visemes = 5,
        OculusBlendshapes = 6,
        EyeData = 7,
        LipData = 8,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Write all properties
            length += WriteStream.WriteBytesLength((uint)PropertyID.FingerPoses, _fingerPoses.Length);
            length += WriteStream.WriteBytesLength((uint)PropertyID.HeadTarget, _headTarget.Length);
            length += WriteStream.WriteBytesLength((uint)PropertyID.RightHeadTarget, _rightHeadTarget.Length);
            length += WriteStream.WriteBytesLength((uint)PropertyID.LeftHandTarget, _leftHandTarget.Length);
            length += WriteStream.WriteBytesLength((uint)PropertyID.Visemes, _visemes.Length);
            length += WriteStream.WriteBytesLength((uint)PropertyID.OculusBlendshapes, _oculusBlendshapes.Length);
            length += WriteStream.WriteBytesLength((uint)PropertyID.EyeData, _eyeData.Length);
            length += WriteStream.WriteBytesLength((uint)PropertyID.LipData, _lipData.Length);
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_fingerPosesShouldWrite) {
                    length += WriteStream.WriteBytesLength((uint)PropertyID.FingerPoses, _fingerPoses.Length);
                }
                if (_headTargetShouldWrite) {
                    length += WriteStream.WriteBytesLength((uint)PropertyID.HeadTarget, _headTarget.Length);
                }
                if (_rightHeadTargetShouldWrite) {
                    length += WriteStream.WriteBytesLength((uint)PropertyID.RightHeadTarget, _rightHeadTarget.Length);
                }
                if (_leftHandTargetShouldWrite) {
                    length += WriteStream.WriteBytesLength((uint)PropertyID.LeftHandTarget, _leftHandTarget.Length);
                }
                if (_visemesShouldWrite) {
                    length += WriteStream.WriteBytesLength((uint)PropertyID.Visemes, _visemes.Length);
                }
                if (_oculusBlendshapesShouldWrite) {
                    length += WriteStream.WriteBytesLength((uint)PropertyID.OculusBlendshapes, _oculusBlendshapes.Length);
                }
                if (_eyeDataShouldWrite) {
                    length += WriteStream.WriteBytesLength((uint)PropertyID.EyeData, _eyeData.Length);
                }
                if (_lipDataShouldWrite) {
                    length += WriteStream.WriteBytesLength((uint)PropertyID.LipData, _lipData.Length);
                }
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteBytes((uint)PropertyID.FingerPoses, _fingerPoses);
            _fingerPosesShouldWrite = false;
            stream.WriteBytes((uint)PropertyID.HeadTarget, _headTarget);
            _headTargetShouldWrite = false;
            stream.WriteBytes((uint)PropertyID.RightHeadTarget, _rightHeadTarget);
            _rightHeadTargetShouldWrite = false;
            stream.WriteBytes((uint)PropertyID.LeftHandTarget, _leftHandTarget);
            _leftHandTargetShouldWrite = false;
            stream.WriteBytes((uint)PropertyID.Visemes, _visemes);
            _visemesShouldWrite = false;
            stream.WriteBytes((uint)PropertyID.OculusBlendshapes, _oculusBlendshapes);
            _oculusBlendshapesShouldWrite = false;
            stream.WriteBytes((uint)PropertyID.EyeData, _eyeData);
            _eyeDataShouldWrite = false;
            stream.WriteBytes((uint)PropertyID.LipData, _lipData);
            _lipDataShouldWrite = false;
        } else {
            // Unreliable properties
            if (context.unreliableChannel) {
                if (_fingerPosesShouldWrite) {
                    stream.WriteBytes((uint)PropertyID.FingerPoses, _fingerPoses);
                    _fingerPosesShouldWrite = false;
                }
                if (_headTargetShouldWrite) {
                    stream.WriteBytes((uint)PropertyID.HeadTarget, _headTarget);
                    _headTargetShouldWrite = false;
                }
                if (_rightHeadTargetShouldWrite) {
                    stream.WriteBytes((uint)PropertyID.RightHeadTarget, _rightHeadTarget);
                    _rightHeadTargetShouldWrite = false;
                }
                if (_leftHandTargetShouldWrite) {
                    stream.WriteBytes((uint)PropertyID.LeftHandTarget, _leftHandTarget);
                    _leftHandTargetShouldWrite = false;
                }
                if (_visemesShouldWrite) {
                    stream.WriteBytes((uint)PropertyID.Visemes, _visemes);
                    _visemesShouldWrite = false;
                }
                if (_oculusBlendshapesShouldWrite) {
                    stream.WriteBytes((uint)PropertyID.OculusBlendshapes, _oculusBlendshapes);
                    _oculusBlendshapesShouldWrite = false;
                }
                if (_eyeDataShouldWrite) {
                    stream.WriteBytes((uint)PropertyID.EyeData, _eyeData);
                    _eyeDataShouldWrite = false;
                }
                if (_lipDataShouldWrite) {
                    stream.WriteBytes((uint)PropertyID.LipData, _lipData);
                    _lipDataShouldWrite = false;
                }
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.FingerPoses: {
                    System.Byte[] previousValue = _fingerPoses;
                    
                    _fingerPoses = stream.ReadBytes();
                    _fingerPosesShouldWrite = false;
                    
                    if (_fingerPoses != previousValue)
                        FireFingerPosesDidChange(_fingerPoses);
                    break;
                }
                case (uint)PropertyID.HeadTarget: {
                    System.Byte[] previousValue = _headTarget;
                    
                    _headTarget = stream.ReadBytes();
                    _headTargetShouldWrite = false;
                    
                    if (_headTarget != previousValue)
                        FireHeadTargetDidChange(_headTarget);
                    break;
                }
                case (uint)PropertyID.RightHeadTarget: {
                    System.Byte[] previousValue = _rightHeadTarget;
                    
                    _rightHeadTarget = stream.ReadBytes();
                    _rightHeadTargetShouldWrite = false;
                    
                    if (_rightHeadTarget != previousValue)
                        FireRightHeadTargetDidChange(_rightHeadTarget);
                    break;
                }
                case (uint)PropertyID.LeftHandTarget: {
                    System.Byte[] previousValue = _leftHandTarget;
                    
                    _leftHandTarget = stream.ReadBytes();
                    _leftHandTargetShouldWrite = false;
                    
                    if (_leftHandTarget != previousValue)
                        FireLeftHandTargetDidChange(_leftHandTarget);
                    break;
                }
                case (uint)PropertyID.Visemes: {
                    System.Byte[] previousValue = _visemes;
                    
                    _visemes = stream.ReadBytes();
                    _visemesShouldWrite = false;
                    
                    if (_visemes != previousValue)
                        FireVisemesDidChange(_visemes);
                    break;
                }
                case (uint)PropertyID.OculusBlendshapes: {
                    System.Byte[] previousValue = _oculusBlendshapes;
                    
                    _oculusBlendshapes = stream.ReadBytes();
                    _oculusBlendshapesShouldWrite = false;
                    
                    if (_oculusBlendshapes != previousValue)
                        FireOculusBlendshapesDidChange(_oculusBlendshapes);
                    break;
                }
                case (uint)PropertyID.EyeData: {
                    System.Byte[] previousValue = _eyeData;
                    
                    _eyeData = stream.ReadBytes();
                    _eyeDataShouldWrite = false;
                    
                    if (_eyeData != previousValue)
                        FireEyeDataDidChange(_eyeData);
                    break;
                }
                case (uint)PropertyID.LipData: {
                    System.Byte[] previousValue = _lipData;
                    
                    _lipData = stream.ReadBytes();
                    _lipDataShouldWrite = false;
                    
                    if (_lipData != previousValue)
                        FireLipDataDidChange(_lipData);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
